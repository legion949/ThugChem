# - In the salt, the non-metal subindex is the subindex for the
#   hydroxyle from reactives
# - In the salt, for Metal subindex is the subindex for the
#   Hydrogen of the Hydride from reactives.
#######################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of the gate2 (We take values before)
gate3 <- gate2
# Salt
gate3["Sub5"]   <- cf2_sub1
gate3["Sub6"]   <- cf1_sub2
# Load the gate3
matrix_solution[general_internal_step, ] <- gate3
###
} # End Step  3 of 9 - Salt
####################################################################
general_internal_step
# We plant a "zero" seed with Stoichiometry steps.
general_internal_step <- 0
# Step 1 of 9 - Salt
{
###
# 1) Presentation for the Reactives
# Hydroxide and Hydride separated both with a "+" sign, both being reactive.
# Subscripts added too.
# ---- In computing, coefficients and subscripts equal to 1 ----
# ---- and only in reagents. Nothing in products. ----
# To the right of the Hydride an arrow called "Reaction Arrow" is placed.
# After the reaction arrow the products will be detailed.
##################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of step 1 ...
gate1 <- rep(NA, ncol(matrix_solution))
names(gate1) <- colnames(matrix_solution)
# Implementamos el gate1...
gate1["Order"] <- general_internal_step
# Hydroxide
gate1["Coef1"] <- 1
gate1["E01"]   <- cf1_element1
gate1["Sub1"]  <- cf1_sub1
gate1["E02"]   <- cf1_element2
gate1["Sub2"]  <- cf1_sub2
# Hydrure
gate1["Coef2"] <- 1
gate1["E03"]   <- cf2_element1
gate1["Sub3"]  <- cf2_sub1
gate1["E04"]   <- cf2_element2
gate1["Sub4"]  <- cf2_sub2
# Salt
gate1["Coef3"] <- ""
gate1["E05"] <- ""
gate1["Sub5"] <- ""
gate1["E06"] <- ""
gate1["Sub6"] <- ""
# Water
gate1["Coef4"] <- ""
gate1["E07"] <- ""
gate1["Sub7"] <- ""
gate1["E08"] <- ""
gate1["Sub8"] <- ""
# Load gate1 on matrix_solution
matrix_solution[general_internal_step, ] <- gate1
###
} # End Step 1 of 9 - Salt
####################################################################
# Step 2 of 9 - Salt
{
###
# 2) Reactives Details
# Salt and water separated both with a "+" sign.
# Salt without subindex.
# Water with normal index.
# Coefficients are 1 for each one.
#####################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of the gate2 (We take values before)
gate2 <- gate1
# Implementation of gate2 modifications...
# Salt
gate2["Coef3"]  <- 1
gate2["E05"]    <- cf1_element1
gate2["Sub5"]   <- 1
gate2["E06"]    <- cf2_element1
gate2["Sub6"]   <- 1
# Water
gate2["Coef4"] <- 1
gate2["E07"]   <- "H"
gate2["Sub7"]  <- 2
gate2["E08"]   <- "O"
gate2["Sub8"]  <- "1"
# Load the gate2
matrix_solution[general_internal_step, ] <- gate2
###
} # End Step 2 of 9 - Salt
####################################################################
# Step 3 of 9 - Salt
{
###
# 3) Salt subindex presentation
# - In the salt, the non-metal subindex is the subindex for the
#   hydroxyle from reactives
# - In the salt, for Metal subindex is the subindex for the
#   Hydrogen of the Hydride from reactives.
#######################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of the gate2 (We take values before)
gate3 <- gate2
# Salt
gate3["Sub5"]   <- cf2_sub1
gate3["Sub6"]   <- cf1_sub2
# Load the gate3
matrix_solution[general_internal_step, ] <- gate3
###
} # End Step  3 of 9 - Salt
####################################################################
# Step  4 of 9 - Salt
{
###
# 4) Salt subindex simplification
# If is possible we must simplify subindex in the salt.
# If that is possible, only simplify without modify coefficient for the salt.
#############################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of the gate4
gate4 <- gate3
# Salt - Subindex before step
sub_ind5 <- as.numeric(as.character(gate3["Sub5"]))
sub_ind6 <- as.numeric(as.character(gate3["Sub6"]))
# We calculate the least common divisor.
# I found a library that does it directly!
library(numbers)
mcd <- mGCD(c(sub_ind5, sub_ind6))
# The new subscripts in the oxide ...
mod_sub_ind5 <- sub_ind5/mcd
mod_sub_ind6 <- sub_ind6/mcd
# Implementation of gate4 modifications...
gate4["Order"] <- general_internal_step
gate4["Sub5"] <- mod_sub_ind5
gate4["Sub6"] <- mod_sub_ind6
# Load the gate gate4
matrix_solution[general_internal_step, ] <- gate4
# Remove objects...
remove(sub_ind5, sub_ind6, mod_sub_ind5, mod_sub_ind6)
###
} # End Step  4 of 9 - Salt
####################################################################
# One step more...
general_internal_step <- general_internal_step + 1
# Gate 5 creation
gate5 <- gate4
general_internal_step
gate4["Sub5"]
gate4
# We plant a "zero" seed with Stoichiometry steps.
general_internal_step <- 0
# Step 1 of 9 - Salt
{
###
# 1) Presentation for the Reactives
# Hydroxide and Hydride separated both with a "+" sign, both being reactive.
# Subscripts added too.
# ---- In computing, coefficients and subscripts equal to 1 ----
# ---- and only in reagents. Nothing in products. ----
# To the right of the Hydride an arrow called "Reaction Arrow" is placed.
# After the reaction arrow the products will be detailed.
##################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of step 1 ...
gate1 <- rep(NA, ncol(matrix_solution))
names(gate1) <- colnames(matrix_solution)
# Implementamos el gate1...
gate1["Order"] <- general_internal_step
# Hydroxide
gate1["Coef1"] <- 1
gate1["E01"]   <- cf1_element1
gate1["Sub1"]  <- cf1_sub1
gate1["E02"]   <- cf1_element2
gate1["Sub2"]  <- cf1_sub2
# Hydrure
gate1["Coef2"] <- 1
gate1["E03"]   <- cf2_element1
gate1["Sub3"]  <- cf2_sub1
gate1["E04"]   <- cf2_element2
gate1["Sub4"]  <- cf2_sub2
# Salt
gate1["Coef3"] <- ""
gate1["E05"] <- ""
gate1["Sub5"] <- ""
gate1["E06"] <- ""
gate1["Sub6"] <- ""
# Water
gate1["Coef4"] <- ""
gate1["E07"] <- ""
gate1["Sub7"] <- ""
gate1["E08"] <- ""
gate1["Sub8"] <- ""
# Load gate1 on matrix_solution
matrix_solution[general_internal_step, ] <- gate1
###
} # End Step 1 of 9 - Salt
####################################################################
# Step 2 of 9 - Salt
{
###
# 2) Reactives Details
# Salt and water separated both with a "+" sign.
# Salt without subindex.
# Water with normal index.
# Coefficients are 1 for each one.
#####################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of the gate2 (We take values before)
gate2 <- gate1
# Implementation of gate2 modifications...
# Salt
gate2["Coef3"]  <- 1
gate2["E05"]    <- cf1_element1
gate2["Sub5"]   <- 1
gate2["E06"]    <- cf2_element1
gate2["Sub6"]   <- 1
# Water
gate2["Coef4"] <- 1
gate2["E07"]   <- "H"
gate2["Sub7"]  <- 2
gate2["E08"]   <- "O"
gate2["Sub8"]  <- "1"
# Load the gate2
matrix_solution[general_internal_step, ] <- gate2
###
} # End Step 2 of 9 - Salt
####################################################################
# Step 3 of 9 - Salt
{
###
# 3) Salt subindex presentation
# - In the salt, the non-metal subindex is the subindex for the
#   hydroxyle from reactives
# - In the salt, for Metal subindex is the subindex for the
#   Hydrogen of the Hydride from reactives.
#######################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of the gate2 (We take values before)
gate3 <- gate2
# Salt
gate3["Sub5"]   <- cf2_sub1
gate3["Sub6"]   <- cf1_sub2
# Load the gate3
matrix_solution[general_internal_step, ] <- gate3
###
} # End Step  3 of 9 - Salt
####################################################################
# Step  4 of 9 - Salt
{
###
# 4) Salt subindex simplification
# If is possible we must simplify subindex in the salt.
# If that is possible, only simplify without modify coefficient for the salt.
#############################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of the gate4
gate4 <- gate3
# Salt - Subindex before step
sub_ind5 <- as.numeric(as.character(gate3["Sub5"]))
sub_ind6 <- as.numeric(as.character(gate3["Sub6"]))
# We calculate the least common divisor.
# I found a library that does it directly!
library(numbers)
mcd <- mGCD(c(sub_ind5, sub_ind6))
# The new subscripts in the oxide ...
mod_sub_ind5 <- sub_ind5/mcd
mod_sub_ind6 <- sub_ind6/mcd
# Implementation of gate4 modifications...
gate4["Order"] <- general_internal_step
gate4["Sub5"] <- mod_sub_ind5
gate4["Sub6"] <- mod_sub_ind6
# Load the gate gate4
matrix_solution[general_internal_step, ] <- gate4
# Remove objects...
remove(sub_ind5, sub_ind6, mod_sub_ind5, mod_sub_ind6)
###
} # End Step  4 of 9 - Salt
####################################################################
# Step 5 of 9 - Salt
{
###
# 5) Balance of the metal
# Our metal subindex in salt will be our new coefficient for Hydroxide in reactives.
#####################################################################
# One step more...
general_internal_step <- general_internal_step + 1
# Gate 5 creation
gate5 <- gate4
# Implementation of changes in Gate 5
gate5["Order"] <- general_internal_step
gate5["Coef1"] <- gate4["Sub5"]
# Load of the gate 5
matrix_solution[general_internal_step, ] <- gate5
###
} # End Step 5 of 9 - Salt
##################################################################################################################
# 6) Balance of the non-metal
# our non-metal index in Salt will be our new coefficient for Hydrure in reactives
############################################################################
# One step more...
general_internal_step <- general_internal_step + 1
# Gate 6 creation
gate6 <- gate5
gate5
# We plant a "zero" seed with Stoichiometry steps.
general_internal_step <- 0
# Step 1 of 9 - Salt
{
###
# 1) Presentation for the Reactives
# Hydroxide and Hydride separated both with a "+" sign, both being reactive.
# Subscripts added too.
# ---- In computing, coefficients and subscripts equal to 1 ----
# ---- and only in reagents. Nothing in products. ----
# To the right of the Hydride an arrow called "Reaction Arrow" is placed.
# After the reaction arrow the products will be detailed.
##################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of step 1 ...
gate1 <- rep(NA, ncol(matrix_solution))
names(gate1) <- colnames(matrix_solution)
# Implementamos el gate1...
gate1["Order"] <- general_internal_step
# Hydroxide
gate1["Coef1"] <- 1
gate1["E01"]   <- cf1_element1
gate1["Sub1"]  <- cf1_sub1
gate1["E02"]   <- cf1_element2
gate1["Sub2"]  <- cf1_sub2
# Hydrure
gate1["Coef2"] <- 1
gate1["E03"]   <- cf2_element1
gate1["Sub3"]  <- cf2_sub1
gate1["E04"]   <- cf2_element2
gate1["Sub4"]  <- cf2_sub2
# Salt
gate1["Coef3"] <- ""
gate1["E05"] <- ""
gate1["Sub5"] <- ""
gate1["E06"] <- ""
gate1["Sub6"] <- ""
# Water
gate1["Coef4"] <- ""
gate1["E07"] <- ""
gate1["Sub7"] <- ""
gate1["E08"] <- ""
gate1["Sub8"] <- ""
# Load gate1 on matrix_solution
matrix_solution[general_internal_step, ] <- gate1
###
} # End Step 1 of 9 - Salt
####################################################################
# Step 2 of 9 - Salt
{
###
# 2) Reactives Details
# Salt and water separated both with a "+" sign.
# Salt without subindex.
# Water with normal index.
# Coefficients are 1 for each one.
#####################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of the gate2 (We take values before)
gate2 <- gate1
# Implementation of gate2 modifications...
# Salt
gate2["Coef3"]  <- 1
gate2["E05"]    <- cf1_element1
gate2["Sub5"]   <- 1
gate2["E06"]    <- cf2_element1
gate2["Sub6"]   <- 1
# Water
gate2["Coef4"] <- 1
gate2["E07"]   <- "H"
gate2["Sub7"]  <- 2
gate2["E08"]   <- "O"
gate2["Sub8"]  <- "1"
# Load the gate2
matrix_solution[general_internal_step, ] <- gate2
###
} # End Step 2 of 9 - Salt
####################################################################
# Step 3 of 9 - Salt
{
###
# 3) Salt subindex presentation
# - In the salt, the non-metal subindex is the subindex for the
#   hydroxyle from reactives
# - In the salt, for Metal subindex is the subindex for the
#   Hydrogen of the Hydride from reactives.
#######################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of the gate2 (We take values before)
gate3 <- gate2
# Salt
gate3["Sub5"]   <- cf2_sub1
gate3["Sub6"]   <- cf1_sub2
# Load the gate3
matrix_solution[general_internal_step, ] <- gate3
###
} # End Step  3 of 9 - Salt
####################################################################
# Step  4 of 9 - Salt
{
###
# 4) Salt subindex simplification
# If is possible we must simplify subindex in the salt.
# If that is possible, only simplify without modify coefficient for the salt.
#############################################################################
# One more step...
general_internal_step <- general_internal_step + 1
# Creation of the gate4
gate4 <- gate3
# Salt - Subindex before step
sub_ind5 <- as.numeric(as.character(gate3["Sub5"]))
sub_ind6 <- as.numeric(as.character(gate3["Sub6"]))
# We calculate the least common divisor.
# I found a library that does it directly!
library(numbers)
mcd <- mGCD(c(sub_ind5, sub_ind6))
# The new subscripts in the oxide ...
mod_sub_ind5 <- sub_ind5/mcd
mod_sub_ind6 <- sub_ind6/mcd
# Implementation of gate4 modifications...
gate4["Order"] <- general_internal_step
gate4["Sub5"] <- mod_sub_ind5
gate4["Sub6"] <- mod_sub_ind6
# Load the gate gate4
matrix_solution[general_internal_step, ] <- gate4
# Remove objects...
remove(sub_ind5, sub_ind6, mod_sub_ind5, mod_sub_ind6)
###
} # End Step  4 of 9 - Salt
####################################################################
# Step 5 of 9 - Salt
{
###
# 5) Balance of the metal
# Our metal subindex in salt will be our new coefficient for Hydroxide in reactives.
#####################################################################
# One step more...
general_internal_step <- general_internal_step + 1
# Gate 5 creation
gate5 <- gate4
# Implementation of changes in Gate 5
gate5["Order"] <- general_internal_step
gate5["Coef1"] <- gate4["Sub5"]
# Load of the gate 5
matrix_solution[general_internal_step, ] <- gate5
###
} # End Step 5 of 9 - Salt
##################################################################################################################
# Step 6 of 9 - Salt
{
###
# 6) Balance of the non-metal
# our non-metal index in Salt will be our new coefficient for Hydrure in reactives
############################################################################
# One step more...
general_internal_step <- general_internal_step + 1
# Gate 6 creation
gate6 <- gate5
# Implementation of changes in Gate 6
gate6["Order"] <- general_internal_step
gate6["Coef2"] <- gate5["Sub6"]
# Load the gate6
matrix_solution[general_internal_step, ] <- gate6
###
} # End Step 6 of 9 - Salt
##################################################################################################################
# 7) Balance of Water (1 of 2) - Hydrogen
# This step 7 balances only hydrogen, and will modify the coefficient for the water.
# To calculate the amount of hydrogen in reagents
# multiply the coefficient for the hydroxide and the corresponding subindex for
# the hydroxyle.
# To calculate the amount of hydrogen in products
# are multiplied by the water coefficient and the subindex
# of hydrogen in the water.
###########################################################################
# One step more...
general_internal_step <- general_internal_step + 1
# Creation of the gate7...
gate7 <- gate6
# Implementation of general_internal_step
gate7["Order"] <- general_internal_step
gate6
gate7
general_internal_step
# Creation of the gate7...
gate7 <- gate6
# Implementation of general_internal_step
gate7["Order"] <- general_internal_step
gate6
runApp()
runApp()
runApp()
