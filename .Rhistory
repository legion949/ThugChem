label = i18n()$t("Valence 01"),
choices = my_valence[[as.numeric(input$atomic_number1)]],
selected = my_valence[[as.numeric(input$atomic_number1)]][1])
updateRadioButtons(session, "valence2",
label = i18n()$t("Valence 02"),
choices = my_valence[[as.numeric(input$atomic_number2)]],
selected = my_valence[[as.numeric(input$atomic_number2)]][1])
})
###
}
########################################################
# Helper
{
###
HelperTable <- reactive({
# Part 01
my_rows <- vector_stoichiometry()
part01 <- paste0(my_rows, " ", i18n()$t("of"), " ", final_step())
armed01 <- paste0(InternalFamily()[3] , "_help01")
armed02 <- paste0(InternalFamily()[3] , "_help02")
armed03_YES <- paste0(InternalFamily()[3] , "_help03_YES")
armed03_NO <- paste0(InternalFamily()[3] , "_help03_NO")
all_armed <- c(armed01, armed02, armed03_YES, armed03_NO)
part02 <- PageHelperLevel[[input$chemestry_family]][[input$selected_language]][my_rows, all_armed]
part03 <- cbind(part01, part02)
part04 <- rep(i18n()$t("Final Equation"), ncol(part03))
part04[1] <- equation_step()
part05 <- rep(i18n()$t("Nomenclature"), ncol(part03))
part05[1] <- nomenclature_step()
part06 <- rbind(part03, part04, part05)
part06
})
HelperLevel01 <- reactive({
# Part 01
my_rows <- vector_stoichiometry()
# part01 <- paste0(my_rows, " ", i18n()$t("of"), " ", final_step())
part01 <- HelperTable()[my_rows,1]
part02 <- paste0("Step ", part01)
#Exit
exit <- list(part01, part02)
exit
})
HelperLevel02 <- reactive({
# Part 01
my_rows <- vector_stoichiometry()
part01 <- paste0(HelperLevel01()[[2]], " - ", HelperTable()[,2])
part01
})
HelperLevel04 <- reactive({
GeneralHelp04(input_atomic_number1 = input$atomic_number1,
input_valence1 = input$valence1,
input_atomic_number2 = input$atomic_number2,
input_valence2 = input$valence2,
input_family = input$chemestry_family,
input_internal_language = "en",
input_external_language = input$selected_language,
input_PeriodicTable = PeriodicTable,
input_Helper = PageHelperLevel)
})
HelperTable_Mod <- reactive({
# HelperTable()
my_rows <- vector_stoichiometry()
my_colnames <- i18n()$t(c("Step", "Resumen", "General details", "Specific details"))
# part01 <- HelperTable()
part01 <- HelperTable()[,c(1:length(my_colnames))]
colnames(part01) <- my_colnames
new_help04 <- HelperLevel04()
part01[my_rows, ncol(part01)] <- new_help04
if(input$help_level < 3) part01[,3] <- rep("Help Level 3", nrow(part01))
if(input$help_level < 4) part01[,4] <- rep("Help Level 4", nrow(part01))
part01
})
HelperLevel01_Mod <- reactive({
RegularText(input_text = HelperLevel01()[[2]], max_n = 6)
})
HelperLevel02_Mod <- reactive({
RegularText(input_text = HelperLevel02(), max_n = 6)
})
HelperLevel03_Mod <- reactive({
RegularText(input_text = HelperTable_Mod()[,3], max_n = 6)
})
HelperLevel04_Mod <- reactive({
RegularText(input_text = HelperTable_Mod()[,4], max_n = 6)
})
# HelperLevel03 <- reactive({
#
#   HelperTable_Mod()[3]
#
# })
#
# HelperLevel04 <- reactive({
#
#   HelperTable_Mod()[,3]
#
# })
###
}
#########################################
# Table Helper Level
output$fc_HL_Table <- renderTable({
if (input$help_level <= 4) HelperTable_Mod()[selected_step(), ]
else HelperTable_Mod()
})
output$resolution_plot <- renderPlot(width = 1600, height = 400,{
if (selected_step() <= final_step() ) {
GeneralPlot( input_atomic_number1 = input$atomic_number1,
input_valence1 = input$valence1,
input_atomic_number2 = input$atomic_number2,
input_valence2 = input$valence2,
input_family = input$chemestry_family,
input_roman = TRUE,
input_step = selected_step(),
input_internal_language = "en",
input_external_language = "en",
input_PeriodicTable = PeriodicTable)
if(input$help_level == 1)    text(15, 25, HelperLevel01()[[2]][selected_step()], cex = 4)
else if(input$help_level >= 2)    text(3, 25, HelperLevel02()[selected_step()], cex = 4, pos = 4)
} else if (selected_step() == equation_step()) {
GeneralPlot( input_atomic_number1 = input$atomic_number1,
input_valence1 = input$valence1,
input_atomic_number2 = input$atomic_number2,
input_valence2 = input$valence2,
input_family = input$chemestry_family,
input_roman = FALSE,
input_step = selected_step()-1,
input_internal_language = "en",
input_external_language = "en",
input_PeriodicTable = PeriodicTable)
text(15, 25, i18n()$t("Final Equation"), cex = 7)
} else if (selected_step() == nomenclature_step()) {
plot(c(0:30), c(0:30), axes=F, col="orange", xlab=" ", ylab=" ")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4], col = "orange", border = "orange")
text(-0.5, 25, i18n()$t("Nomenclature"), cex = 7, pos = 4)
armed01 <- nomenclature()[2,1]
armed02 <- nomenclature()[2,2]
armed03 <- nomenclature()[2,3]
armed04 <- nomenclature()[3,4]
armed05 <- paste0("expression(", nomenclature()[1,4], ")")
text(0, 17, armed01, cex = 2, pos = 4)
text(0, 11, armed02, cex = 2, pos = 4)
text(0,  5, armed03, cex = 2, pos = 4)
text(22, 25, armed04, cex = 7)
text(22, 10, eval(parse(text=armed05)), cex = 10)
}
})
output$tabla_nomenclatura <- renderTable({
nomenclature()
})
###############################################################################
output$resolution_plot_V2 <- renderPlot(width = 1600, height = 400,{
if (selected_step() <= final_step() ) {
GeneralPlot( input_atomic_number1 = input$atomic_number1,
input_valence1 = input$valence1,
input_atomic_number2 = input$atomic_number2,
input_valence2 = input$valence2,
input_family = input$chemestry_family,
input_roman = TRUE,
input_step = selected_step(),
input_internal_language = "en",
input_external_language = "en",
input_PeriodicTable = PeriodicTable)
text(0, 0, "Plot V2", cex = 4)
# Level 1 or 2
if(input$help_level == 1)    text(-1, 20, HelperLevel01_Mod()[selected_step()], cex = 1, pos = 4)
else if(input$help_level >= 2)    text(-1, 20, HelperLevel02_Mod()[selected_step()], cex = 1,  pos = 4)
# # Level 3
if(input$help_level >= 3)    text(5, 20, HelperLevel03_Mod()[selected_step()], cex = 1, adj = c(0,0.5))
# # Level 4
if(input$help_level >= 4)    text(20, 20, HelperLevel04_Mod()[selected_step()], cex = 1, adj = c(0,0.5))
#
} else if (selected_step() == equation_step()) {
GeneralPlot( input_atomic_number1 = input$atomic_number1,
input_valence1 = input$valence1,
input_atomic_number2 = input$atomic_number2,
input_valence2 = input$valence2,
input_family = input$chemestry_family,
input_roman = FALSE,
input_step = selected_step()-1,
input_internal_language = "en",
input_external_language = "en",
input_PeriodicTable = PeriodicTable)
text(15, 25, i18n()$t("Final Equation"), cex = 7)
} else if (selected_step() == nomenclature_step()) {
plot(c(0:30), c(0:30), axes=F, col="orange", xlab=" ", ylab=" ")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4], col = "orange", border = "orange")
text(-0.5, 25, i18n()$t("Nomenclature"), cex = 7, pos = 4)
armed01 <- nomenclature()[2,1]
armed02 <- nomenclature()[2,2]
armed03 <- nomenclature()[2,3]
armed04 <- nomenclature()[3,4]
armed05 <- paste0("expression(", nomenclature()[1,4], ")")
text(0, 17, armed01, cex = 2, pos = 4)
text(0, 11, armed02, cex = 2, pos = 4)
text(0,  5, armed03, cex = 2, pos = 4)
text(22, 25, armed04, cex = 7)
text(22, 10, eval(parse(text=armed05)), cex = 10)
}
})
}
) # End shinySever()
runApp()
BASE <- PageHelperLevel[["Oxide"]][["es"]]
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl1
texto01 <- RegularText(input_text = 1, max_n = 6)
texto02 <- RegularText(input_text = "ASdasd asdasd \nA", max_n = 6)
plot(c(0:10), c(0:10))
text(5, 5, texto01, pos = 4)
text(6, 5, texto02, adj = c(0,0.5))
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl1
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 2]
lvl3 <- BASE[paso, 2]
plot (c(0,10), c(0:10))
text(2, 6, lvl1)
text(4, 6, lvl2)
text(5, 6, lvl3)
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 2]
lvl3 <- BASE[paso, 2]
plot (c(0,10), c(0:10), col ="white")
text(2, 6, lvl1)
text(4, 6, lvl2)
text(5, 6, lvl3)
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 2]
lvl3 <- BASE[paso, 2]
plot (c(0,10), c(0:10), col ="white")
text(2, 6, lvl1)
text(4, 6, lvl2)
text(5, 6, lvl3)
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 2]
lvl3 <- BASE[paso, 2]
plot (c(0,10), c(0:10), col ="white")
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 2]
lvl3 <- BASE[paso, 2]
plot (c(0:10), c(0:10), col ="white")
text(2, 6, lvl1)
text(4, 6, lvl2)
text(5, 6, lvl3)
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 2]
lvl3 <- BASE[paso, 2]
plot (c(0:10), c(0:10), col ="white")
text(2, 6, lvl1)
text(4, 6, lvl2)
text(6, 6, lvl3)
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(2, 6, lvl1)
text(4, 6, lvl2)
text(6, 6, lvl3)
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1)
text(4, 6, lvl2)
text(8, 6, lvl3)
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, pos = 4)
text(4, 6, lvl2)
text(8, 6, lvl3)
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, pos = 4)
text(4, 6, lvl2, adj = c(0,1))
text(8, 6, lvl3)
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, pos = 4)
text(2, 6, lvl2, adj = c(0,1))
text(8, 6, lvl3)
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, pos = 4)
text(2, 6, lvl2, adj = c(0,1))
text(8, 6, lvl3, adj = c(0,1))
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, pos = 4)
text(2, 6, lvl2, adj = c(0,1))
text(7, 6, lvl3, adj = c(0,1))
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, pos = 1)
text(2, 6, lvl2, adj = c(0,1))
text(7, 6, lvl3, adj = c(0,1))
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, pos = 2)
text(2, 6, lvl2, adj = c(0,1))
text(7, 6, lvl3, adj = c(0,1))
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, pos = 3)
text(2, 6, lvl2, adj = c(0,1))
text(7, 6, lvl3, adj = c(0,1))
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 1
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, adj = c(0,1))
text(2, 6, lvl2, adj = c(0,1))
text(7, 6, lvl3, adj = c(0,1))
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 2
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, adj = c(0,1))
text(2, 6, lvl2, adj = c(0,1))
text(7, 6, lvl3, adj = c(0,1))
BASE <- PageHelperLevel[["Oxide"]][["es"]]
paso <- 3
lvl1 <- BASE[paso, 2]
lvl2 <- BASE[paso, 3]
lvl3 <- BASE[paso, 4]
plot (c(0:10), c(0:10), col ="white")
text(0, 6, lvl1, adj = c(0,1))
text(2, 6, lvl2, adj = c(0,1))
text(7, 6, lvl3, adj = c(0,1))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input_atomic_number1 <- 26
input_valence1 <- 2
input_atomic_number2 <- 6
input_valence2 <- 2
input_internal_language <- "en"
input_external_language <- "es"
input_PeriodicTable <- PeriodicTable
input_family = "Oxosalt"
input_Helper = PageHelperLevel
input_oxosalt_help04 <- OxosaltHelp04(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_atomic_number2 = input_atomic_number2,
input_valence2 = input_valence2,
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_family = input_family,
input_Helper = input_Helper)
input_oxosalt_help04
# Internal Settings
{
###
# Important Detail!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Internally are using "en" (English) as internal language and options.
# The input_optional_language is for select some correct options form each language
# in the output.
input_internal_language <- "en"
if (is.null(input_external_language)) input_external_language <- "en"
###
} # End Internal Settings
##########################################################################
# Part 0: Necessary Participants
{
###
# Principal objects - First Element
atomic_number1 <- as.numeric(as.character(input_atomic_number1))
valence1 <-  as.numeric(as.character(input_valence1))
# Recruited values - First Element
symbol1 <- as.character(input_PeriodicTable[[input_internal_language]][atomic_number1, 2])
name1  <- as.character(input_PeriodicTable[[input_internal_language]][atomic_number1, 3])
type1 <- as.character(input_PeriodicTable[[input_internal_language]][atomic_number1, 7])
state1 <- as.character(input_PeriodicTable[[input_internal_language]][atomic_number1, 9])
if (type1 == "Metalloid") type1 <- "Non-metal"
# Principal objects - Second Element
atomic_number2 <- as.numeric(as.character(input_atomic_number2))
valence2 <-  as.numeric(as.character(input_valence2))
# Recruited values - Second Element
symbol2 <- as.character(input_PeriodicTable[[input_internal_language]][atomic_number2, 2])
name2  <- as.character(input_PeriodicTable[[input_internal_language]][atomic_number2, 3])
type2 <- as.character(input_PeriodicTable[[input_internal_language]][atomic_number2, 7])
state2 <- as.character(input_PeriodicTable[[input_internal_language]][atomic_number2, 9])
if (type2 == "Metalloid") type2 <- "Non-metal"
# Internal Control
internal_control <- InternalControl_Oxosalt(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_atomic_number2 = input_atomic_number2,
input_valence2 = input_valence2,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
input_oxosalt_resolution <- OxosaltEquation(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_atomic_number2 = input_atomic_number2,
input_valence2 = input_valence2,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
###
} # End Part 0: Necessary Participants
####################################################
# Part 1: Isolate
{
###
the_helper04 <- input_Helper[[input_family]][[input_external_language]]
selected_columns <- c((ncol(the_helper04)-1), ncol(the_helper04))
the_helper04 <- the_helper04[,selected_columns]
# Options
my_YES <- the_helper04[,1]
my_NO <- the_helper04[,2]
# General substitution
my_YES <- gsub("_element1_", symbol1, my_YES)
my_YES <- gsub("_valence1_", valence1, my_YES)
my_NO <- gsub("_element2_", symbol2, my_NO)
my_NO <- gsub("_valence2_", valence2, my_NO)
# Default Values is NO
new_help04 <- my_NO
###
} # End Part1
############################
my_YES
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
