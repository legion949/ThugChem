my_pos2 <- orden_names[dt_coef3] - 1
my_pos3 <- my_pos2 + 1
my_pos4 <- ncol(input_table)
arrow_column <- rep("symbol('\\256')", nrow(input_table))
my_table_mod <- cbind(input_table[ ,c(my_pos1:my_pos2)], arrow_column,
input_table[, c(my_pos3:my_pos4)])
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector
my_exit <- cbind(input_table[,1], my_vector)
colnames(my_exit) <- c("Step", "Jax2")
my_exit
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(c(0:10), c(0:10), col ="white")
text(5, 5, expression(A  *symbol('\256')*  B), cex = 6)
text(5, 2, expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O), cex = 3)
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(c(0:10), c(0:10), col ="white")
text(5, 5, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 2, eval(text(aver)), cex = 3)
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(c(0:10), c(0:10), col ="white")
text(5, 5, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 2, eval(text=aver), cex = 3)
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(c(0:10), c(0:10), col ="white")
text(5, 5, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 2, eval(parse(text=aver)), cex = 3)
my_exit
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector <- paste0("expression(", my_vector, ")")
my_vector
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(c(0:10), c(0:2), col ="white")
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
plot(c(0:10), c(0:2), col ="white")
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(0, 0, ylim = c(0,2), xlim = c(0,10), col ="white")
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
runApp()
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(0, 0, ylim = c(0,2), xlim = c(0,10), col ="white")
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(0, 0, ylim = c(0,2), xlim = c(0,10), col ="white",
axes = F)
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(0, 0, ylim = c(0,2), xlim = c(0,10), col ="white",
axes = F, xlab = "", ylab = "")
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
runApp()
runApp()
runApp()
my_vector
my_vector
my_vector[k] <- gsub("phantom()", "", my_vector[k])
my_vector[k] <- gsub("phantom(1)", "_", my_vector[k])
my_vector[k]
input_table
my_names <- colnames(input_table)
dt_coef3 <- my_names == "Coef3"
orden_names <- c(1:length(my_names))
my_pos1 <- 2
my_pos2 <- orden_names[dt_coef3] - 1
my_pos3 <- my_pos2 + 1
my_pos4 <- ncol(input_table)
arrow_column <- rep("symbol('\\256')", nrow(input_table))
my_table_mod <- cbind(input_table[ ,c(my_pos1:my_pos2)], arrow_column,
input_table[, c(my_pos3:my_pos4)])
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector <- paste0("expression(", my_vector, ")")
for (k in 1:length(my_vector)){
my_vector[k] <- gsub("phantom()", "", my_vector[k])
my_vector[k] <- gsub("phantom(1)", "_", my_vector[k])
my_vector[k] <- gsub("[**]", "", my_vector[k])
my_vector[k] <- gsub("[*]", "", my_vector[k])
my_vector[k] <- gsub("1", "", my_vector[k])
my_vector[k] <- gsub("[']", "", my_vector[k])
my_vector[k] <- paste0("$$", my_vector[k], "$$", collapse ="")
}
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector <- paste0("expression(", my_vector, ")")
for (k in 1:length(my_vector)){
my_vector[k] <- gsub("phantom()", "", my_vector[k])
my_vector[k] <- gsub("phantom(1)", "_", my_vector[k])
my_vector[k] <- gsub("[**]", "", my_vector[k])
#   my_vector[k] <- gsub("[*]", "", my_vector[k])
#  my_vector[k] <- gsub("1", "", my_vector[k])
#  my_vector[k] <- gsub("[']", "", my_vector[k])
my_vector[k] <- paste0("$$", my_vector[k], "$$", collapse ="")
}
my_vector
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector <- paste0("expression(", my_vector, ")")
for (k in 1:length(my_vector)){
my_vector[k] <- gsub("phantom()", "", my_vector[k])
my_vector[k] <- gsub("phantom(1)", "_", my_vector[k])
my_vector[k] <- gsub("[**]", "", my_vector[k])
#   my_vector[k] <- gsub("[*]", "", my_vector[k])
#  my_vector[k] <- gsub("1", "", my_vector[k])
#  my_vector[k] <- gsub("[']", "", my_vector[k])
# my_vector[k] <- paste0("$$", my_vector[k], "$$", collapse ="")
}
my_vector
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector <- paste0("expression(", my_vector, ")")
for (k in 1:length(my_vector)){
my_vector[k] <- gsub("phantom()", "", my_vector[k])
my_vector[k] <- gsub("phantom(1)", "_", my_vector[k])
#  my_vector[k] <- gsub("[**]", "", my_vector[k])
#   my_vector[k] <- gsub("[*]", "", my_vector[k])
#  my_vector[k] <- gsub("1", "", my_vector[k])
#  my_vector[k] <- gsub("[']", "", my_vector[k])
# my_vector[k] <- paste0("$$", my_vector[k], "$$", collapse ="")
}
my_vector
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector <- paste0("expression(", my_vector, ")")
for (k in 1:length(my_vector)){
my_vector[k] <- gsub("phantom()", "", my_vector[k])
my_vector[k] <- gsub("phantom(1)", "", my_vector[k])
my_vector[k] <- gsub("(1)", "", my_vector[k])
#  my_vector[k] <- gsub("[**]", "", my_vector[k])
#   my_vector[k] <- gsub("[*]", "", my_vector[k])
#  my_vector[k] <- gsub("1", "", my_vector[k])
#  my_vector[k] <- gsub("[']", "", my_vector[k])
# my_vector[k] <- paste0("$$", my_vector[k], "$$", collapse ="")
}
my_vector
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector <- paste0("expression(", my_vector, ")")
for (k in 1:length(my_vector)){
my_vector[k] <- gsub("phantom()", "", my_vector[k])
my_vector[k] <- gsub("phantom(1)", "", my_vector[k])
my_vector[k] <- gsub("[(1)]", "", my_vector[k])
#  my_vector[k] <- gsub("[**]", "", my_vector[k])
#   my_vector[k] <- gsub("[*]", "", my_vector[k])
#  my_vector[k] <- gsub("1", "", my_vector[k])
#  my_vector[k] <- gsub("[']", "", my_vector[k])
# my_vector[k] <- paste0("$$", my_vector[k], "$$", collapse ="")
}
my_vector
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector <- paste0("expression(", my_vector, ")")
for (k in 1:length(my_vector)){
my_vector[k] <- gsub("phantom()", "", my_vector[k])
my_vector[k] <- gsub("phantom(1)", "", my_vector[k])
#    my_vector[k] <- gsub("[(1)]", "", my_vector[k])
#  my_vector[k] <- gsub("[**]", "", my_vector[k])
#   my_vector[k] <- gsub("[*]", "", my_vector[k])
#  my_vector[k] <- gsub("1", "", my_vector[k])
#  my_vector[k] <- gsub("[']", "", my_vector[k])
# my_vector[k] <- paste0("$$", my_vector[k], "$$", collapse ="")
}
my_vector
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector <- paste0("expression(", my_vector, ")")
for (k in 1:length(my_vector)){
my_vector[k] <- gsub("phantom()", "", my_vector[k])
my_vector[k] <- gsub("[phantom(1)]", "", my_vector[k])
#    my_vector[k] <- gsub("[(1)]", "", my_vector[k])
#  my_vector[k] <- gsub("[**]", "", my_vector[k])
#   my_vector[k] <- gsub("[*]", "", my_vector[k])
#  my_vector[k] <- gsub("1", "", my_vector[k])
#  my_vector[k] <- gsub("[']", "", my_vector[k])
# my_vector[k] <- paste0("$$", my_vector[k], "$$", collapse ="")
}
my_vector
my_vector <- c()
for (k in 1:nrow(my_table_mod)) my_vector[k] <-  paste0(my_table_mod[k,], collapse ="*")
my_vector <- paste0("expression(", my_vector, ")")
for (k in 1:length(my_vector)){
my_vector[k] <- gsub("phantom()", "", my_vector[k])
my_vector[k] <- gsub("phantom(1)", "", my_vector[k])
#    my_vector[k] <- gsub("[(1)]", "", my_vector[k])
#  my_vector[k] <- gsub("[**]", "", my_vector[k])
#   my_vector[k] <- gsub("[*]", "", my_vector[k])
#  my_vector[k] <- gsub("1", "", my_vector[k])
#  my_vector[k] <- gsub("[']", "", my_vector[k])
# my_vector[k] <- paste0("$$", my_vector[k], "$$", collapse ="")
}
my_vector
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aver <- "asd$$asdasd"
gsub("$$", "", aver)
aver <- "asd$$asdasd"
gsub("[$$]", "", aver)
runApp()
runApp()
runApp()
runApp()
runApp()
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(0, 0, ylim = c(0,2), xlim = c(0,10), col ="white",
axes = F, xlab = "", ylab = "")
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
#
# aver <- "asd$$asdasd"
# gsub("[$$]", "", aver)
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
plot(0, 0, ylim = c(0,2), xlim = c(0,10), col ="white",
axes = F, xlab = "", ylab = "")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4], col = "orange", border = "orange")
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
#
# aver <- "asd$$asdasd"
# gsub("[$$]", "", aver)
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
par(mar = c(par("mar")[1], par("mar")[2], 0, 0))
plot(0, 0, ylim = c(0,2), xlim = c(0,10), col ="white",
axes = F, xlab = "", ylab = "")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4], col = "orange", border = "orange")
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
#
# aver <- "asd$$asdasd"
# gsub("[$$]", "", aver)
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
par(mar = c(0, 0, 0, 0))
plot(0, 0, ylim = c(0,2), xlim = c(0,10), col ="white",
axes = F, xlab = "", ylab = "")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4], col = "orange", border = "orange")
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
#
# aver <- "asd$$asdasd"
# gsub("[$$]", "", aver)
opar <- par()
opar
par(mar = c(5, 4, 4, 2) + 0.1)
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
# Default values
par(mar = c(5, 4, 4, 2) + 0.1)
#par(mar = c(0, 0, 0, 0))
opar <- par()
plot(0, 0, ylim = c(0,2), xlim = c(0,10), col ="white",
axes = F, xlab = "", ylab = "")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4], col = "orange", border = "orange")
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
#
# aver <- "asd$$asdasd"
# gsub("[$$]", "", aver)
input_table <- input_general_resolution[[2]]
input_jax2 <- GeneralJax2(input_table = input_table)
# Default values
par(mar = c(5, 4, 4, 2) + 0.1)
#par(mar = c(0, 0, 0, 0))
opar <- par()
par(mar = c(0, 0, 0, 0))
plot(0, 0, ylim = c(0,2), xlim = c(0,10), col ="white",
axes = F, xlab = "", ylab = "")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4], col = "orange", border = "orange")
#text(5, 1, expression(A  *symbol('\256')*  B), cex = 6)
aver <- "expression(4*Li*'+'*phantom(1)*O[2]*symbol('\\256')*2*Li[2]*O)"
text(5, 1, eval(parse(text=aver)), cex = 3)
par(opar)
#
# aver <- "asd$$asdasd"
# gsub("[$$]", "", aver)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# you need to include `session` as a third argument here
server <- function(input, output, session) {
# blank (plot for width) ----
output$blank <- renderPlot({
ggplot(data.frame(x = 1), aes(NA, NA)) + geom_blank() + theme_void()
})
blankwidth <- reactive({
# this is the magic that makes it work
bw <- session$clientData$output_blank_width
if (bw > 400) 400 else bw
})
blankheight <- reactive({
blankwidth() / 1.25
# whatever aspect ratio you need
})
output$plotofinterest <- renderPlot({
ggplot(iris[sample.int(150,50),], aes(1, fill = Species)) +
geom_bar() + coord_polar(theta = "y")
}, height = blankheight, width = blankwidth)
# this is the necessary bit
}
# ui.R
ui <- fluidPage(
fluidRow(
column(4,
style = "background-color:lightgreen",
plotOutput('blank', width = '100%', height = 0),
plotOutput('plotofinterest', inline = T)
),
column(8,
style = "background-color:lightblue",
HTML("filler")
)
)
)
shinyApp(ui, server)
library(ggplot2)
library(ggplot)
# you need to include `session` as a third argument here
server <- function(input, output, session) {
# blank (plot for width) ----
output$blank <- renderPlot({
ggplot(data.frame(x = 1), aes(NA, NA)) + geom_blank() + theme_void()
})
blankwidth <- reactive({
# this is the magic that makes it work
bw <- session$clientData$output_blank_width
if (bw > 400) 400 else bw
})
blankheight <- reactive({
blankwidth() / 1.25
# whatever aspect ratio you need
})
output$plotofinterest <- renderPlot({
ggplot(iris[sample.int(150,50),], aes(1, fill = Species)) +
geom_bar() + coord_polar(theta = "y")
}, height = blankheight, width = blankwidth)
# this is the necessary bit
}
# ui.R
ui <- fluidPage(
fluidRow(
column(4,
style = "background-color:lightgreen",
plotOutput('blank', width = '100%', height = 0),
plotOutput('plotofinterest', inline = T)
),
column(8,
style = "background-color:lightblue",
HTML("filler")
)
)
)
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
pnorm(101, mean =100, sd = 5.47, lower.tail = TRUE, log.p = FALSE)
pnorm(x = 101, mean =100, sd = sqrt(30), lower.tail = TRUE, log.p = FALSE)
pnorm(q = 101, mean =100, sd = sqrt(30), lower.tail = TRUE, log.p = FALSE)
pnorm(q = 101, mean =100, sd = sqrt(30), lower.tail = TRUE, log.p = FALSE)
sqrt(30)
sqrt(31)
