input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# Internal Control
internal_control <- InternalControl_Oxide(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# Oxide Resolution
input_oxide_resolution <- OxideEquation(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# LaTeX resolution
input_oxide_latex <- OxideLaTeX(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
input_latex <- input_oxide_latex[[2]]
# Chemestry Formule
chemestry_formule_resolution <- input_oxide_resolution[nrow(input_latex), c(9:12)]
chemestry_formule_latex <- input_latex[nrow(input_latex), 8]
amount1 <- as.numeric(as.character(chemestry_formule_resolution[1,2]))
amount2 <- as.numeric(as.character(chemestry_formule_resolution[1,4]))
###
} # Fin Parte 0
##############################################
# Part 1: Other Necessary Items
{
###
# Roman numerals
romans <- c("I", "II", "III", "IV", "V", "VI", "VII", "")
prefixes <- Nomenclature$Prefixes[[input_external_language]]
medium_part_classic <- Nomenclature$General01[[input_external_language]]
# This position is only for oxides
my_pos <- 1
###
} # Part 1
############################################
# Part2: General Nomenclature
{
###
# Only nomenclature for Oxide in the selected language
complete_nomenclature <- Nomenclature[[input_family]][[input_external_language]]
# Some details...
position <- ncol(complete_nomenclature)
stock_nomenclature <- complete_nomenclature[,position]
classic_nomenclature <- complete_nomenclature[,c((position-5): (position-1))]
set_names <- input_Nomenclature$General02[[input_external_language]][,2]
# Special Details
language_pos <-        c( 2 ,   3 ,   2 )
names(language_pos) <- c("en", "es", "fr")
special_detail <- language_pos[names(language_pos) == input_external_language]
###
} # End Part2
#####################################################
# Part3: Isolate Nomenclature
{
###
pre01 <- prefixes[amount1, 2]
pre02 <- prefixes[amount2, 2]
my_name <- element_values1$name
my_family <- medium_part_classic[my_pos, special_detail]
my_stock_nomenclature <- stock_nomenclature[input_atomic_number1]
my_roman <- romans[element_values1$selected_valence]
my_classic_nomenclature <- classic_nomenclature[input_atomic_number1, element_values1$order_selected_valence]
###
} # End Part3
#########################################
# Part4: Nomenclature System for each Language
{
###
# Modifications for Language English
if (input_external_language == "en") {
# Prefix Correction for English
if(pre02 ==  pre01)  pre02 <- ""
# IUPAC
iupac <- paste0(pre02, my_name, " ", pre01, my_family)
# Stock
stock <- paste0(my_stock_nomenclature, " ", "(", my_roman, ")")
# Classic
classic <- my_classic_nomenclature
# Writing errors English
iupac <- gsub("ii", "i-i", iupac)
iupac <- gsub("iI", "i-I", iupac)
iupac <- gsub("oO", "o", iupac)
}
# Modifications for Language Spanish
if (input_external_language == "es") {
# Prefix Correction for Spanish# Prefix Correction for Spanish
if(pre02 ==  pre01)  pre01 <- ""
# IUPAC
iupac <- paste0(pre02, my_family, " ", pre01, my_name)
# Stock
stock <- paste0(my_stock_nomenclature, " ", "(", my_roman, ")")
# Classic
classic <- my_classic_nomenclature
# Writing spanish errors
iupac <- gsub("oÓ", "ó", iupac)
iupac <- gsub("aÓ", "ó", iupac)
}
###
} # End Part4
################################################
# Part5: My exit
{
###
# Save all
nomenclature_system01 <- c(iupac, stock, classic, chemestry_formule_latex)
nomenclature_system02 <- paste0(set_names, ": ", nomenclature_system01)
nomenclature_system03 <- set_names
my_exit <- as.data.frame(rbind(nomenclature_system01, nomenclature_system02,
nomenclature_system03))
colnames(my_exit) <- set_names
###
} # End: Part 5
###################################################
# Part6: Return
{
###
return(my_exit)
###
} # End Part6
######################################
} # End Function OxideNomenclature***
#
# input_atomic_number1 <- 26 #Litio
# input_valence1 <- 2
# input_internal_language <- "en"
# input_external_language <- "es"
# input_family <- "Oxide"
# input_PeriodicTable <- PeriodicTable
# input_Nomenclature <- Nomenclature
#
#
#
#                                 OxideNomenclature(input_atomic_number1 = input_atomic_number1,
#                                                   input_valence1 = input_valence1,
#                                                   input_family = input_family,
#                                                   input_internal_language = input_internal_language,
#                                                   input_external_language = input_external_language,
#                                                   input_PeriodicTable = input_PeriodicTable,
#                                                   input_Nomenclature = input_Nomenclature)
#
# #
# #
OxideNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_family = input_family,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
OxideNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
runApp()
GeneralNomenclature(input_atomic_number1 = as.numeric(as.character(input$atomic_number1)),
input_valence1 = as.numeric(as.character(input$valence1)),
input_atomic_number2 = as.numeric(as.character(input$atomic_number2)),
input_valence2 = as.numeric(as.character(input$valence2)),
input_family = input$chemestry_family,
input_internal_language = "en",
input_external_language = input$selected_language,
input_PeriodicTable = PeriodicTable,
input_Nomenclature = Nomenclature)
GeneralNomenclature(input_atomic_number1 = as.numeric(as.character(input$atomic_number1)),
input_valence1 = as.numeric(as.character(input$valence1)),
input_atomic_number2 = as.numeric(as.character(input$atomic_number2)),
input_valence2 = as.numeric(as.character(input$valence2)),
input_family = "Oxide",
input_internal_language = "en",
input_external_language = input$selected_language,
input_PeriodicTable = PeriodicTable,
input_Nomenclature = Nomenclature)
GeneralNomenclature(input_atomic_number1 = 23,
input_valence1 = 2,
input_atomic_number2 = NULL,
input_valence2 = NULL,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = input$selected_language,
input_PeriodicTable = PeriodicTable,
input_Nomenclature = Nomenclature)
GeneralNomenclature(input_atomic_number1 = 23,
input_valence1 = 2,
input_atomic_number2 = NULL,
input_valence2 = NULL,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = "es",
input_PeriodicTable = PeriodicTable,
input_Nomenclature = Nomenclature)
OxideNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
OxideNomenclature(input_atomic_number1 = 23,
input_valence1 = 2,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
OxideNomenclature(input_atomic_number1 = 23,
input_valence1 = 2,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = "es",
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
OxideNomenclature(input_atomic_number1 = 23,
input_valence1 = 2,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = "es",
input_PeriodicTable =  PeriodicTable,
input_Nomenclature = Nomenclature)
# Internal Settings
{
###
# Internal language specifications by default and optional if null
input_internal_language <- "en"
if (is.null(input_external_language)) input_external_language <- input_internal_language
# If is null the input_family
if (is.null(input_family)) input_family <- "Oxide"
###
} # End Internal Settings
##########################################################################
# Part 0: Necessary Participants
{
###
# Element Values
element_values1 <- Internal_ElementValues(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# Internal Control
internal_control <- InternalControl_Oxide(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# Oxide Resolution
input_oxide_resolution <- OxideEquation(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# LaTeX resolution
input_oxide_latex <- OxideLaTeX(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
input_latex <- input_oxide_latex[[2]]
# Chemestry Formule
chemestry_formule_resolution <- input_oxide_resolution[nrow(input_latex), c(9:12)]
chemestry_formule_latex <- input_latex[nrow(input_latex), 8]
amount1 <- as.numeric(as.character(chemestry_formule_resolution[1,2]))
amount2 <- as.numeric(as.character(chemestry_formule_resolution[1,4]))
###
} # Fin Parte 0
##############################################
# Part 1: Other Necessary Items
{
###
# Roman numerals
romans <- c("I", "II", "III", "IV", "V", "VI", "VII", "")
prefixes <- Nomenclature$Prefixes[[input_external_language]]
medium_part_classic <- Nomenclature$General01[[input_external_language]]
# This position is only for oxides
my_pos <- 1
###
} # Part 1
############################################
# Part2: General Nomenclature
{
###
# Only nomenclature for Oxide in the selected language
complete_nomenclature <- Nomenclature[[input_family]][[input_external_language]]
# Some details...
position <- ncol(complete_nomenclature)
stock_nomenclature <- complete_nomenclature[,position]
classic_nomenclature <- complete_nomenclature[,c((position-5): (position-1))]
set_names <- input_Nomenclature$General02[[input_external_language]][,2]
# Special Details
language_pos <-        c( 2 ,   3 ,   2 )
names(language_pos) <- c("en", "es", "fr")
special_detail <- language_pos[names(language_pos) == input_external_language]
###
} # End Part2
#####################################################
# Part3: Isolate Nomenclature
{
###
pre01 <- prefixes[amount1, 2]
pre02 <- prefixes[amount2, 2]
my_name <- element_values1$name
my_family <- medium_part_classic[my_pos, special_detail]
my_stock_nomenclature <- stock_nomenclature[input_atomic_number1]
my_roman <- romans[element_values1$selected_valence]
my_classic_nomenclature <- classic_nomenclature[input_atomic_number1, element_values1$order_selected_valence]
###
} # End Part3
#########################################
input_atomic_number1 <- 26 #Litio
input_valence1 <- 2
input_internal_language <- "en"
input_external_language <- "es"
input_family <- "Oxide"
input_PeriodicTable <- PeriodicTable
input_Nomenclature <- Nomenclature
# Internal Settings
{
###
# Internal language specifications by default and optional if null
input_internal_language <- "en"
if (is.null(input_external_language)) input_external_language <- input_internal_language
# If is null the input_family
if (is.null(input_family)) input_family <- "Oxide"
###
} # End Internal Settings
##########################################################################
# Part 0: Necessary Participants
{
###
# Element Values
element_values1 <- Internal_ElementValues(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# Internal Control
internal_control <- InternalControl_Oxide(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# Oxide Resolution
input_oxide_resolution <- OxideEquation(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# LaTeX resolution
input_oxide_latex <- OxideLaTeX(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
input_latex <- input_oxide_latex[[2]]
# Chemestry Formule
chemestry_formule_resolution <- input_oxide_resolution[nrow(input_latex), c(9:12)]
chemestry_formule_latex <- input_latex[nrow(input_latex), 8]
amount1 <- as.numeric(as.character(chemestry_formule_resolution[1,2]))
amount2 <- as.numeric(as.character(chemestry_formule_resolution[1,4]))
###
} # Fin Parte 0
##############################################
# Part 1: Other Necessary Items
{
###
# Roman numerals
romans <- c("I", "II", "III", "IV", "V", "VI", "VII", "")
prefixes <- Nomenclature$Prefixes[[input_external_language]]
medium_part_classic <- Nomenclature$General01[[input_external_language]]
# This position is only for oxides
my_pos <- 1
###
} # Part 1
############################################
# Part2: General Nomenclature
{
###
# Only nomenclature for Oxide in the selected language
complete_nomenclature <- Nomenclature[[input_family]][[input_external_language]]
# Some details...
position <- ncol(complete_nomenclature)
stock_nomenclature <- complete_nomenclature[,position]
classic_nomenclature <- complete_nomenclature[,c((position-5): (position-1))]
set_names <- input_Nomenclature$General02[[input_external_language]][,2]
# Special Details
language_pos <-        c( 2 ,   3 ,   2 )
names(language_pos) <- c("en", "es", "fr")
special_detail <- language_pos[names(language_pos) == input_external_language]
###
} # End Part2
#####################################################
# Part3: Isolate Nomenclature
{
###
pre01 <- prefixes[amount1, 2]
pre02 <- prefixes[amount2, 2]
my_name <- element_values1$name
my_family <- medium_part_classic[my_pos, special_detail]
my_stock_nomenclature <- stock_nomenclature[input_atomic_number1]
my_roman <- romans[element_values1$selected_valence]
my_classic_nomenclature <- classic_nomenclature[input_atomic_number1, element_values1$order_selected_valence]
###
} # End Part3
#########################################
# Modifications for Language Spanish
if (input_external_language == "es") {
# Prefix Correction for Spanish# Prefix Correction for Spanish
if(pre02 ==  pre01)  pre01 <- ""
# IUPAC
iupac <- paste0(pre02, my_family, " ", pre01, my_name)
# Stock
stock <- paste0(my_stock_nomenclature, " ", "(", my_roman, ")")
# Classic
classic <- my_classic_nomenclature
# Writing spanish errors
iupac <- gsub("oÓ", "ó", iupac)
iupac <- gsub("aÓ", "ó", iupac)
}
iupac
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
PageHelperLevel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
PageHelperLevel
PageHelperLevel
PageHelperLevel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
