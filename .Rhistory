} else
if ("Hydracid" == input_family) {
# Hydradic
general_nomenclature <- HydracidNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = input_internal_language,
input_family = "Hydracid",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
} else
if ("Oxosalt" == input_family) {
# Oxosalt
general_nomenclature <- OxosaltNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_atomic_number2 = input_atomic_number2,
input_valence2 = input_valence2,
input_family = "Oxosalt",
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
} else
if ("Salt" == input_family) {
# Salt
general_nomenclature <- SaltNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_atomic_number2 = input_atomic_number2,
input_valence2 = input_valence2,
input_family = "Salt",
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
}
###
} # End Part 1: Structure of the "matrix_solution"
############################################################
# Part 3: Return
{
###
return(general_nomenclature)
###
} # End Part 5: Return
############################################
} # End Function***
input_atomic_number1 <- 6 #Litio
input_valence1 <- 2
input_atomic_number2 <- 9 #Flúor
input_valence2 <- 1
input_family = "Oxide"
input_internal_language <- "en"
input_external_language <- "es"
input_PeriodicTable <- PeriodicTable
input_Nomenclature <- Nomenclature
input_general_nomenclature <- GeneralNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_atomic_number2 = input_atomic_number2,
input_valence2 = input_valence2,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
input_general_nomenclature
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
iupac
gsub("Ó", "AAAAAAAAAA", "Ó")
gsub("Ó", "AAAAAAAAAA", "BÓBBB")
runApp()
tweet <- "áéíóú"
tweet = gsub("<U+00E9>", "e", tweet, fixed = T)
tweet = gsub("<U+00E1>", "a", tweet, fixed = T)
tweet = gsub("<U+00BF>", "" , tweet, fixed = T)
tweet
tweet <- "áéíóú"
tweet = gsub("<U+00E9>", "e", tweet)
tweet = gsub("<U+00E1>", "a", tweet)
tweet = gsub("<U+00BF>", "" , tweet)
tweet
tweet <- "áéíóú"
tweets = gsub("\303\272", "u", tweets)
tweets = gsub("\303\241", "a", tweets)
tweets = gsub("\303\255", "i", tweets)
tweets = gsub("\303\263", "o", tweets)
tweets = gsub("\303\251", "e", tweets)
tweets = gsub("\303\271", "u", tweets)
tweets = gsub("\303\201", "O", tweets)
tweets = gsub("\303\211", "E", tweets)
tweets = gsub("\342\234\224", "", tweets)
tweets = gsub("\302\241", "", tweets)
tweets = gsub("\302\277", "", tweets)
tweet
stringi::stri_trans_general(tweet, "Latin-ASCII")
runApp()
runApp()
runApp()
runApp()
runApp()
# Libreries
library(shiny)
library(shinyjs) # Language detection
library(shinydashboard) # New Sthetic
library(tableHTML) # Color cell in tables
library(numbers) # Minimum Common Divisor
library(stringr) # str_count()
library(shiny.i18n)
# The function for load others functions!
LoadFunctions <- function(the_dir = NULL){
all_chem_files <- list.files(the_dir, recursive = T)
all_completed <- paste0(the_dir, "/", all_chem_files)
for (k in 1:length(all_completed)) {
# cat(k, "\n")
source(all_completed[k])
}
}
# Load Stoichiometry Functions!
LoadFunctions(the_dir = "StoichiometryFunctions")
# Load Functions to Load Data!
LoadFunctions(the_dir = "LoadDataFunctions")
# Load More Functions!
LoadFunctions(the_dir = "MoreFunctions")
# Load all PeriodicTables
PeriodicTable <- LoadPeriodicTable()
# The list
PeriodicTable <- list()
# The dir
my_dir_periodic <- "data/PeriodicTables"
# All files
my_files_periodic <- list.files(my_dir_periodic, include.dirs = T)
my_files_periodic
# Completed dir
completed_files_periodic <- paste0(my_dir_periodic, "/", my_files_periodic)
# The languages
my_language <- unlist(strsplit(unlist(strsplit(my_files_periodic, ".csv")), "PeriodicTable_"))[c(F,T)]
# The load!
for (k in 1:length(completed_files_periodic)) {
PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
dec=".", header = T, encoding = "latin1")
}
PeriodicTable
PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
dec=".", header = T)
# The load!
for (k in 1:length(completed_files_periodic)) {
PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
dec=".", header = T)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
dec=".", header = T, encoding = "utf-8")
# The list
PeriodicTable <- list()
# The dir
my_dir_periodic <- "data/PeriodicTables"
# All files
my_files_periodic <- list.files(my_dir_periodic, include.dirs = T)
# Completed dir
completed_files_periodic <- paste0(my_dir_periodic, "/", my_files_periodic)
# The languages
my_language <- unlist(strsplit(unlist(strsplit(my_files_periodic, ".csv")), "PeriodicTable_"))[c(F,T)]
# The load!
for (k in 1:length(completed_files_periodic)) {
# PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
#                                dec=".", header = T, encoding = "latin1")
#
PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
dec=".", header = T, encoding = "utf-8")
}
PeriodicTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(NewCombination)
runApp()
shiny::runApp()
runApp()
getOption("encoding")
Sys.getlocale("LC_ALL")
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
x <- "Maur\xEDcio"
Encoding(x) <- "latin1"
details(x)
x
x <- "Maur\xEDcio"
Encoding(x)
x
details(x)
x
x <- "Maur\xEDcio"
x
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
iupac <- "MonoÓxido"
iupac <- grep("oÓ", "ó", iupac)
iupac
iupac <- "MonoÓxido"
iupac <- grep("ó", "oÓ", iupac)
iupac
iupac
iupac <- "MonoÓxido"
iupac <- "MonoÓxido"
grep("ó", "oÓ", iupac)
iupac <- "MonoÓxido"
grep(iupac, "ó", "oÓ")
iupac <- "MonoÓxido"
gsub("oÓ", "o", iupac)
iupac <- "MonoÓxido"
gsub("oÓ", "ó", iupac)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
iupac <- "MonoÓxido"
gsub("oÓ", "ó", iupac)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tabla <- matrix("MonoÓxido", 3, 3)
gsub("oÓ", "ó", tabla)
runApp()
runApp()
runApp()
runApp()
runApp()
input_atomic_number1 <- 6 #Litio
input_valence1 <- 2
input_atomic_number2 <- 9 #Flúor
input_valence2 <- 1
input_family = "Oxide"
input_internal_language <- "en"
input_external_language <- "es"
input_PeriodicTable <- PeriodicTable
input_Nomenclature <- Nomenclature
input_general_nomenclature <- GeneralNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_atomic_number2 = input_atomic_number2,
input_valence2 = input_valence2,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
input_general_nomenclature
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aver <- "Monóxido"
Endoding(aver)
aver <- "Monóxido"
Encoding(aver)
aver <- "Monóxido"
Encoding(aver)
Encoding(aver) <- "utf-8"
aver
aver <- "Monóxido"
Encoding(aver)
Encoding(aver) <- "utf-8"
aver
Encoding(aver)
aver <- "Monóxido"
Encoding(aver)
Encoding(aver) <- "UTF-8"
aver
Encoding(aver)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aver <- "Monóxido"
aver <- gsub("oÓ", "ó", aver)
aver
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aver <- "Monóxido Z"
corte1 <- c("oÓ", "Z")
corte2 <- c("Ó", "ZZZ")
aver <- "Monóxido Z"
aver <- gsub("oÓ", "ó", aver)
aver
corte1 <- c("oÓ", "Z")
corte2 <- c("Ó", "ZZZ")
# Encoding(corte1)
# Encoding(corte2)
Encoding(corte1) <- "UTF-8"
Encoding(corte2) <- "UTF-8"
iupac <- gsub(corte1, corte2, aver)
iupac
corte2
corte1
aver <- "Monóxido Z"
corte1 <- c("oÓ", "Z")
corte2 <- c("Ó", "ZZZ")
Encoding(corte1) <- "UTF-8"
Encoding(corte2) <- "UTF-8"
Encoding(corte1)
Encoding(corte2)
iupac <- gsub(corte1, corte2, aver)
iupac
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
PageFamilyOptions
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Initiatilation
my_return <- list()
# 1) Chemical Family
{
###
# Label 01
the_label <- i18n()$t("Chemestry Family")
# Internal Options (Default - En. For example: Oxide)
the_internal_options <- PageFamilyOptions[,"chemestry_family"]
# Visual User options (Default - En)
the_user_options <- PageFamilyOptions[,"user_chem_fam"]
# The fusion vector
the_options <- the_user_options
names(the_options) <- i18n()$t(the_user_options)
my_return[[1]] <- list(the_label, the_vector)
names(my_chemestry_family)[1] <- "My Chemestry Family"
names(my_return[[1]]) <- c("Labels", "Options")
###
}
##########################################################################
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
my_step_options
names(my_step_options)
the_user_options <- names(my_step_options)
i18n()$t(the_user_options)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
PageHelperLevel
PageHelperLevel[["en"]]
runApp()
runApp()
runApp()
PageHelperLevel
PageHelperLevel[["Oxide"]]
PageHelperLevel[["Oxide"]][[es]]
PageHelperLevel[["Oxide"]][["es"]]
nrow(PageHelperLevel[["Oxide"]][["es"]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Control the value, min, max, and step.
updateSliderInput(session, "slider", label = i18n()$t("Slider"),
value = selected_step(),
min = min(vector_slider()),
max = max(vector_slider())
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Armo un grafico, con un punto en blanco para que no se note el punto
plot(1, 1, col ="white")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shiny.i18n")
install.packages("shiny.i18n")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
