iupac <- gsub("ii", "i-i", iupac)
iupac <- gsub("iI", "i-I", iupac)
iupac <- gsub("oO", "o", iupac)
}
# Modifications for Language Spanish
if (input_external_language == "es") {
# Prefix Correction for Spanish# Prefix Correction for Spanish
if(pre02 ==  pre01)  pre01 <- ""
# IUPAC
iupac <- paste0(pre02, my_family, " ", pre01, my_name)
# Stock
stock <- paste0(my_stock_nomenclature, " ", "(", my_roman, ")")
# Classic
classic <- my_classic_nomenclature
# Writing spanish errors
iupac <- gsub("oÓ", "ó", iupac)
iupac <- gsub("aÓ", "ó", iupac)
}
###
} # End Part4
################################################
# Part5: My exit
{
###
# Save all
nomenclature_system01 <- c(iupac, stock, classic, chemestry_formule_latex)
nomenclature_system02 <- paste0(set_names, ": ", nomenclature_system01)
nomenclature_system03 <- set_names
my_exit <- as.data.frame(rbind(nomenclature_system01, nomenclature_system02,
nomenclature_system03))
colnames(my_exit) <- set_names
###
} # End: Part 5
###################################################
# Part6: Return
{
###
return(my_exit)
###
} # End Part6
######################################
} # End Function OxideNomenclature***
# #
input_atomic_number1 <- 6 #Litio
input_valence1 <- 2
input_internal_language <- "en"
input_external_language <- "es"
input_family <- "Oxide"
input_PeriodicTable <- PeriodicTable
input_Nomenclature <- Nomenclature
OxideNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_family = input_family,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
#
#
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
OxideNomenclature <- function(input_atomic_number1 = NULL,
input_valence1 = NULL,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = NULL,
input_PeriodicTable = NULL,
input_Nomenclature = NULL) {
# Internal Settings
{
###
# Internal language specifications by default and optional if null
if (is.null(input_internal_language)) input_internal_language <- "en"
if (is.null(input_external_language)) input_external_language <- input_internal_language
# If is null the input_family
if (is.null(input_family)) input_family <- "Oxide"
###
} # End Internal Settings
##########################################################################
# Part 0: Necessary Participants
{
###
# Element Values
element_values1 <- Internal_ElementValues(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# Internal Control
internal_control <- InternalControl_Oxide(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# Oxide Resolution
input_oxide_resolution <- OxideEquation(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
# LaTeX resolution
input_oxide_latex <- OxideLaTeX(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable)
input_latex <- input_oxide_latex[[2]]
# Chemestry Formule
chemestry_formule_resolution <- input_oxide_resolution[nrow(input_latex), c(9:12)]
chemestry_formule_latex <- input_latex[nrow(input_latex), 8]
amount1 <- as.numeric(as.character(chemestry_formule_resolution[1,2]))
amount2 <- as.numeric(as.character(chemestry_formule_resolution[1,4]))
###
} # Fin Parte 0
##############################################
# Part 1: Other Necessary Items
{
###
# Roman numerals
romans <- c("I", "II", "III", "IV", "V", "VI", "VII", "")
prefixes <- Nomenclature$Prefixes[[input_external_language]]
medium_part_classic <- Nomenclature$General01[[input_external_language]]
# This position is only for oxides
my_pos <- 1
###
} # Part 1
############################################
# Part2: General Nomenclature
{
###
# Only nomenclature for Oxide in the selected language
complete_nomenclature <- Nomenclature[[input_family]][[input_external_language]]
# Some details...
position <- ncol(complete_nomenclature)
stock_nomenclature <- complete_nomenclature[,position]
classic_nomenclature <- complete_nomenclature[,c((position-5): (position-1))]
set_names <- input_Nomenclature$General02[[input_external_language]][,2]
# Special Details
language_pos <-        c( 2 ,   3 ,   2 )
names(language_pos) <- c("en", "es", "fr")
special_detail <- language_pos[names(language_pos) == input_external_language]
###
} # End Part2
#####################################################
# Part3: Isolate Nomenclature
{
###
pre01 <- prefixes[amount1, 2]
pre02 <- prefixes[amount2, 2]
my_name <- element_values1$name
my_family <- medium_part_classic[my_pos, special_detail]
my_stock_nomenclature <- stock_nomenclature[input_atomic_number1]
my_roman <- romans[element_values1$selected_valence]
my_classic_nomenclature <- classic_nomenclature[input_atomic_number1, element_values1$order_selected_valence]
###
} # End Part3
#########################################
# Part4: Nomenclature System for each Language
{
###
# Modifications for Language English
if (input_external_language == "en") {
# Prefix Correction for English
if(pre02 ==  pre01)  pre02 <- ""
# IUPAC
iupac <- paste0(pre02, my_name, " ", pre01, my_family)
# Stock
stock <- paste0(my_stock_nomenclature, " ", "(", my_roman, ")")
# Classic
classic <- my_classic_nomenclature
# Writing errors English
iupac <- gsub("ii", "i-i", iupac)
iupac <- gsub("iI", "i-I", iupac)
iupac <- gsub("oO", "o", iupac)
}
# Modifications for Language Spanish
if (input_external_language == "es") {
# Prefix Correction for Spanish# Prefix Correction for Spanish
if(pre02 ==  pre01)  pre01 <- ""
# IUPAC
iupac <- paste0(pre02, my_family, " ", pre01, my_name)
# Stock
stock <- paste0(my_stock_nomenclature, " ", "(", my_roman, ")")
# Classic
classic <- my_classic_nomenclature
# Writing spanish errors
iupac <- gsub("oÓ", "ó", iupac)
iupac <- gsub("aÓ", "ó", iupac)
}
###
} # End Part4
################################################
# Part5: My exit
{
###
# Save all
nomenclature_system01 <- c(iupac, stock, classic, chemestry_formule_latex)
nomenclature_system02 <- paste0(set_names, ": ", nomenclature_system01)
nomenclature_system03 <- set_names
my_exit <- as.data.frame(rbind(nomenclature_system01, nomenclature_system02,
nomenclature_system03))
colnames(my_exit) <- set_names
###
} # End: Part 5
###################################################
# Part6: Return
{
###
return(my_exit)
###
} # End Part6
######################################
} # End Function OxideNomenclature***
#
input_atomic_number1 <- 6 #Litio
input_valence1 <- 2
input_internal_language <- "en"
input_external_language <- "es"
input_family <- "Oxide"
input_PeriodicTable <- PeriodicTable
input_Nomenclature <- Nomenclature
OxideNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_family = input_family,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
general_nomenclature <- OxideNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_family = input_family,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
general_nomenclature
# Resolution 08: General
GeneralNomenclature <- function(input_atomic_number1 = NULL, input_valence1 = NULL,
input_atomic_number2 = NULL, input_valence2 = NULL,
input_family = NULL,
input_internal_language = NULL,
input_external_language = NULL,
input_PeriodicTable = NULL,
input_Nomenclature = NULL) {
# Internal Settings
{
###
# Chemestry Family
my_family <- c("Oxide", "Hydroxide", "Oxacid",
"Hydride", "Hydracid", "Oxosalt",
"Salt")
if(is.null(input_family)) cat("GeneralEquation() said: 'I need a input family!\n")
###
} # End Internal Settings
##########################################################################
# Part 0: Necessary Participants
{
###
# Internal Language
internal_language <- as.character(input_internal_language)
###
} # End Part 0: Necessary Participants
####################################################
# Part 1: Resolution
{
###
if ("Oxide" == input_family) {
# Oxide!
general_nomenclature <- OxideNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_family = input_family,
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
} else
if ("Hydroxide" == input_family) {
# Hydroxide!
general_nomenclature <- HydroxideNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_family = "Hydroxide",
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
} else
if ("Oxacid" == input_family) {
# Oxacid
general_nomenclature <- OxacidNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_family = "Oxacid",
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
} else
if ("Hydride" == input_family) {
# Hydride
general_nomenclature <- HydrideNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = input_internal_language,
input_family = "Hydride",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
} else
if ("Hydracid" == input_family) {
# Hydradic
general_nomenclature <- HydracidNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_internal_language = input_internal_language,
input_family = "Hydracid",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
} else
if ("Oxosalt" == input_family) {
# Oxosalt
general_nomenclature <- OxosaltNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_atomic_number2 = input_atomic_number2,
input_valence2 = input_valence2,
input_family = "Oxosalt",
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
} else
if ("Salt" == input_family) {
# Salt
general_nomenclature <- SaltNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_atomic_number2 = input_atomic_number2,
input_valence2 = input_valence2,
input_family = "Salt",
input_internal_language = input_internal_language,
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
}
###
} # End Part 1: Structure of the "matrix_solution"
############################################################
# Part 3: Return
{
###
return(general_nomenclature)
###
} # End Part 5: Return
############################################
} # End Function***
input_atomic_number1 <- 6 #Litio
input_valence1 <- 2
input_atomic_number2 <- 9 #Flúor
input_valence2 <- 1
input_family = "Oxide"
input_internal_language <- "en"
input_external_language <- "es"
input_PeriodicTable <- PeriodicTable
input_Nomenclature <- Nomenclature
input_general_nomenclature <- GeneralNomenclature(input_atomic_number1 = input_atomic_number1,
input_valence1 = input_valence1,
input_atomic_number2 = input_atomic_number2,
input_valence2 = input_valence2,
input_family = "Oxide",
input_internal_language = "en",
input_external_language = input_external_language,
input_PeriodicTable = input_PeriodicTable,
input_Nomenclature = input_Nomenclature)
input_general_nomenclature
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
iupac
gsub("Ó", "AAAAAAAAAA", "Ó")
gsub("Ó", "AAAAAAAAAA", "BÓBBB")
runApp()
tweet <- "áéíóú"
tweet = gsub("<U+00E9>", "e", tweet, fixed = T)
tweet = gsub("<U+00E1>", "a", tweet, fixed = T)
tweet = gsub("<U+00BF>", "" , tweet, fixed = T)
tweet
tweet <- "áéíóú"
tweet = gsub("<U+00E9>", "e", tweet)
tweet = gsub("<U+00E1>", "a", tweet)
tweet = gsub("<U+00BF>", "" , tweet)
tweet
tweet <- "áéíóú"
tweets = gsub("\303\272", "u", tweets)
tweets = gsub("\303\241", "a", tweets)
tweets = gsub("\303\255", "i", tweets)
tweets = gsub("\303\263", "o", tweets)
tweets = gsub("\303\251", "e", tweets)
tweets = gsub("\303\271", "u", tweets)
tweets = gsub("\303\201", "O", tweets)
tweets = gsub("\303\211", "E", tweets)
tweets = gsub("\342\234\224", "", tweets)
tweets = gsub("\302\241", "", tweets)
tweets = gsub("\302\277", "", tweets)
tweet
stringi::stri_trans_general(tweet, "Latin-ASCII")
runApp()
runApp()
runApp()
runApp()
runApp()
# Libreries
library(shiny)
library(shinyjs) # Language detection
library(shinydashboard) # New Sthetic
library(tableHTML) # Color cell in tables
library(numbers) # Minimum Common Divisor
library(stringr) # str_count()
library(shiny.i18n)
# The function for load others functions!
LoadFunctions <- function(the_dir = NULL){
all_chem_files <- list.files(the_dir, recursive = T)
all_completed <- paste0(the_dir, "/", all_chem_files)
for (k in 1:length(all_completed)) {
# cat(k, "\n")
source(all_completed[k])
}
}
# Load Stoichiometry Functions!
LoadFunctions(the_dir = "StoichiometryFunctions")
# Load Functions to Load Data!
LoadFunctions(the_dir = "LoadDataFunctions")
# Load More Functions!
LoadFunctions(the_dir = "MoreFunctions")
# Load all PeriodicTables
PeriodicTable <- LoadPeriodicTable()
# The list
PeriodicTable <- list()
# The dir
my_dir_periodic <- "data/PeriodicTables"
# All files
my_files_periodic <- list.files(my_dir_periodic, include.dirs = T)
my_files_periodic
# Completed dir
completed_files_periodic <- paste0(my_dir_periodic, "/", my_files_periodic)
# The languages
my_language <- unlist(strsplit(unlist(strsplit(my_files_periodic, ".csv")), "PeriodicTable_"))[c(F,T)]
# The load!
for (k in 1:length(completed_files_periodic)) {
PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
dec=".", header = T, encoding = "latin1")
}
PeriodicTable
PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
dec=".", header = T)
# The load!
for (k in 1:length(completed_files_periodic)) {
PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
dec=".", header = T)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
dec=".", header = T, encoding = "utf-8")
# The list
PeriodicTable <- list()
# The dir
my_dir_periodic <- "data/PeriodicTables"
# All files
my_files_periodic <- list.files(my_dir_periodic, include.dirs = T)
# Completed dir
completed_files_periodic <- paste0(my_dir_periodic, "/", my_files_periodic)
# The languages
my_language <- unlist(strsplit(unlist(strsplit(my_files_periodic, ".csv")), "PeriodicTable_"))[c(F,T)]
# The load!
for (k in 1:length(completed_files_periodic)) {
# PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
#                                dec=".", header = T, encoding = "latin1")
#
PeriodicTable[[k]] <- read.csv(file = completed_files_periodic[k], sep=",",
dec=".", header = T, encoding = "utf-8")
}
PeriodicTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(NewCombination)
runApp()
shiny::runApp()
runApp()
